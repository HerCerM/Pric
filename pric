#!/usr/bin/env groovy
import groovy.cli.commons.CliBuilder

Map<String, String> ext2type = [
        // Backend
        java: 'java',
        groovy: 'groovy',
        php: 'php',
        py: 'python',
        // Frontend
        js: 'javascript',
        html: 'html',
        css: 'css',
        // Scripting
        bat: 'batch',
        sh: 'bash',
        // Typesetting
        tex: 'latex',
        md: 'markdown',
        adoc: 'asciidoc',
        // Low level
        c: 'c'
]

class PricPDFPrinter {
    List<String> extensions
    String outputFilename
    String title
    List<String> paths
    boolean recursive
    boolean keepAsciidoc

    void print() {
        // Check the file passed by -o is a PDF file
        if (!isPdfFile(outputFilename)) {
            println """\
                ERROR: File name supplied by -o is not a PDF file.
                       Verify the filename has extension '.pdf'.
                """.stripIndent()
            System.exit(1)
        }

        // Filename without extension
        String filenameNoExt = outputFilename.split('[.]')[0]

        // Create AsciiDoc file
        File asciiDocFile = new File("${filenameNoExt}.adoc")
        // Set file title
        asciiDocFile.write("= ${title ?: filenameNoExt}\n\n")
    }

    private boolean isPdfFile(String filename) {
        return filename.endsWith('pdf')
    }
}

// Define API
CliBuilder cli = new CliBuilder(usage: 'Print multiple char-based files to a a single PDF')
cli.with {
    h(longOpt: 'help', 'usage information')
    e(longOpt: 'extensions', args: '+', valueSeparator: ',', '[required] extensions of the files to be printed')
    o(longOpt: 'output', type: String, '[required] output filename of the PDF')
    t(longOpt: 'title', type: String, 'title of the document. If omitted, filename -o is used')
    p(longOpt: 'paths', args: '+', valueSeparator: ',', 'directories to search for the files')
    r(longOpt: 'recursive', 'recurse sub-directories')
    _(longOpt: 'keep-asciidoc', 'preserve Asciidoc file after PDF generation')
}
def requiredOptions = ['e', 'o']

// Parse command line arguments
def options = cli.parse(args)

// Print help message
if (options.h) {
    cli.usage()
    System.exit(0)
}

// Required options check
for (def option : requiredOptions) {
    if (!options[option]) {
        println 'ERROR: Missing one or more required options.'
        cli.usage()
        System.exit(0)
    }
}

// Build printer
PricPDFPrinter printer = new PricPDFPrinter(
        extensions: options.es, outputFilename: options.o, title: options.t ?: '',
        paths: options.ps ?: [], recursive: options.r, keepAsciidoc: options.keepAsciidoc
)

printer.print()